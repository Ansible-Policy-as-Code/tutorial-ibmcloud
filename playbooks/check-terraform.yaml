- hosts: localhost
  connection: local
  vars:
    git_clone_path: '/tmp/ansible-pac-test'
    tf_project_path: '/tmp/ansible-pac-test/terraform'
    policy_as_code_plan_validation_url: "http://150.240.71.92:8181/v1/data/corp/policies"
    git_repo_https_clone_url: "https://github.com/jem2305/ansible-pac-test.git"

  tasks:
    - name: Create empty terraform folder
      file:
        path: "{{ git_clone_path }}"
        state: directory
        mode: 0755
      check_mode: no

    - name: Clone Git repo holding Terraform scripts
      git:
        repo: "{{ git_repo_https_clone_url }}"
        dest: "{{ git_clone_path }}"
        clone: yes
        force: yes
        single_branch: yes
        version: main
      check_mode: no

    - name: Init terraform
      community.general.terraform:
        project_path: "{{ tf_project_path }}"
        state: present
        force_init: yes
      register: tfplan

    - name: Parse plan file
      set_fact:
        tfplan_file: "{{ tfplan.command.split(' ') | last }}"

    - ansible.builtin.command: 
        cmd: "terraform show -json {{ tfplan_file }}"
        chdir: "{{ tf_project_path }}"
      check_mode: no
      register: tfshow
    
    - name: Validate plan
      ansible.builtin.uri:
        url: "{{ policy_as_code_plan_validation_url }}"
        method: POST
        body: '{ "input": { "tfplan": {{ tfshow.stdout }} } }'
        body_format: json
      check_mode: no
      register: validation_response
      failed_when:
        - validation_response.json.result.passes_validation == false

    - name: Print validation response
      debug:
        msg: "{{ validation_response }}"